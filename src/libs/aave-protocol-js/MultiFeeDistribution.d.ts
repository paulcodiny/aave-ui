/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface MultiFeeDistributionInterface extends ethers.utils.Interface {
  functions: {
    'addReward(address)': FunctionFragment;
    'claimableRewards(address)': FunctionFragment;
    'earnedBalances(address)': FunctionFragment;
    'exit(bool)': FunctionFragment;
    'getReward(address[])': FunctionFragment;
    'getRewardForDuration(address)': FunctionFragment;
    'incentivesController()': FunctionFragment;
    'lastTimeRewardApplicable(address)': FunctionFragment;
    'lockDuration()': FunctionFragment;
    'lockedBalances(address)': FunctionFragment;
    'lockedSupply()': FunctionFragment;
    'mint(address,uint256,bool)': FunctionFragment;
    'minters(address)': FunctionFragment;
    'mintersAreSet()': FunctionFragment;
    'owner()': FunctionFragment;
    'recoverERC20(address,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardData(address)': FunctionFragment;
    'rewardPerToken(address)': FunctionFragment;
    'rewardTokens(uint256)': FunctionFragment;
    'rewards(address,address)': FunctionFragment;
    'rewardsDuration()': FunctionFragment;
    'setIncentivesController(address)': FunctionFragment;
    'setMinters(address[])': FunctionFragment;
    'stake(uint256,bool)': FunctionFragment;
    'stakingToken()': FunctionFragment;
    'totalBalance(address)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unlockedBalance(address)': FunctionFragment;
    'userRewardPerTokenPaid(address,address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawExpiredLocks()': FunctionFragment;
    'withdrawableBalance(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'addReward', values: [string]): string;
  encodeFunctionData(functionFragment: 'claimableRewards', values: [string]): string;
  encodeFunctionData(functionFragment: 'earnedBalances', values: [string]): string;
  encodeFunctionData(functionFragment: 'exit', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'getReward', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'getRewardForDuration', values: [string]): string;
  encodeFunctionData(functionFragment: 'incentivesController', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastTimeRewardApplicable', values: [string]): string;
  encodeFunctionData(functionFragment: 'lockDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockedBalances', values: [string]): string;
  encodeFunctionData(functionFragment: 'lockedSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mint', values: [string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'minters', values: [string]): string;
  encodeFunctionData(functionFragment: 'mintersAreSet', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'recoverERC20', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardData', values: [string]): string;
  encodeFunctionData(functionFragment: 'rewardPerToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'rewardTokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'rewards', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'rewardsDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setIncentivesController', values: [string]): string;
  encodeFunctionData(functionFragment: 'setMinters', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'stake', values: [BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'stakingToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalBalance', values: [string]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'unlockedBalance', values: [string]): string;
  encodeFunctionData(functionFragment: 'userRewardPerTokenPaid', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawExpiredLocks', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawableBalance', values: [string]): string;

  decodeFunctionResult(functionFragment: 'addReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimableRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earnedBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardForDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'incentivesController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastTimeRewardApplicable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintersAreSet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardPerToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIncentivesController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlockedBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userRewardPerTokenPaid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawExpiredLocks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawableBalance', data: BytesLike): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
    'Recovered(address,uint256)': EventFragment;
    'RewardAdded(uint256)': EventFragment;
    'RewardPaid(address,address,uint256)': EventFragment;
    'RewardsDurationUpdated(address,uint256)': EventFragment;
    'Staked(address,uint256,bool)': EventFragment;
    'Withdrawn(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Recovered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardPaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsDurationUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Staked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment;
}

export class MultiFeeDistribution extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MultiFeeDistributionInterface;

  functions: {
    addReward(_rewardsToken: string, overrides?: Overrides): Promise<ContractTransaction>;

    'addReward(address)'(
      _rewardsToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimableRewards(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      rewards: { token: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      0: { token: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    }>;

    'claimableRewards(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      rewards: { token: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      0: { token: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    }>;

    earnedBalances(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      earningsData: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
    }>;

    'earnedBalances(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      earningsData: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
    }>;

    exit(claimRewards: boolean, overrides?: Overrides): Promise<ContractTransaction>;

    'exit(bool)'(claimRewards: boolean, overrides?: Overrides): Promise<ContractTransaction>;

    getReward(_rewardTokens: string[], overrides?: Overrides): Promise<ContractTransaction>;

    'getReward(address[])'(
      _rewardTokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRewardForDuration(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getRewardForDuration(address)'(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    incentivesController(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    'incentivesController()'(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'lastTimeRewardApplicable(address)'(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lockDuration(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'lockDuration()'(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lockedBalances(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      lockData: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
    }>;

    'lockedBalances(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      lockData: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
    }>;

    lockedSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'lockedSupply()'(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    mint(
      user: string,
      amount: BigNumberish,
      withPenalty: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'mint(address,uint256,bool)'(
      user: string,
      amount: BigNumberish,
      withPenalty: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    minters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    'minters(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    mintersAreSet(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    'mintersAreSet()'(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    'owner()'(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'recoverERC20(address,uint256)'(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      periodFinish: BigNumber;
      rewardRate: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
      balance: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    'rewardData(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      periodFinish: BigNumber;
      rewardRate: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
      balance: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    rewardPerToken(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'rewardPerToken(address)'(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'rewardTokens(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'rewards(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    rewardsDuration(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'rewardsDuration()'(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    setIncentivesController(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'setIncentivesController(address)'(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinters(_minters: string[], overrides?: Overrides): Promise<ContractTransaction>;

    'setMinters(address[])'(
      _minters: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stake(amount: BigNumberish, lock: boolean, overrides?: Overrides): Promise<ContractTransaction>;

    'stake(uint256,bool)'(
      amount: BigNumberish,
      lock: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    'stakingToken()'(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    'totalBalance(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'totalSupply()'(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockedBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    'unlockedBalance(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'userRewardPerTokenPaid(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdraw(amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    'withdraw(uint256)'(amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    withdrawExpiredLocks(overrides?: Overrides): Promise<ContractTransaction>;

    'withdrawExpiredLocks()'(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawableBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      penaltyAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    'withdrawableBalance(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      penaltyAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  addReward(_rewardsToken: string, overrides?: Overrides): Promise<ContractTransaction>;

  'addReward(address)'(_rewardsToken: string, overrides?: Overrides): Promise<ContractTransaction>;

  claimableRewards(
    account: string,
    overrides?: CallOverrides
  ): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

  'claimableRewards(address)'(
    account: string,
    overrides?: CallOverrides
  ): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

  earnedBalances(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    total: BigNumber;
    earningsData: {
      amount: BigNumber;
      unlockTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
    0: BigNumber;
    1: {
      amount: BigNumber;
      unlockTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
  }>;

  'earnedBalances(address)'(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    total: BigNumber;
    earningsData: {
      amount: BigNumber;
      unlockTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
    0: BigNumber;
    1: {
      amount: BigNumber;
      unlockTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
  }>;

  exit(claimRewards: boolean, overrides?: Overrides): Promise<ContractTransaction>;

  'exit(bool)'(claimRewards: boolean, overrides?: Overrides): Promise<ContractTransaction>;

  getReward(_rewardTokens: string[], overrides?: Overrides): Promise<ContractTransaction>;

  'getReward(address[])'(
    _rewardTokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRewardForDuration(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getRewardForDuration(address)'(
    _rewardsToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  incentivesController(overrides?: CallOverrides): Promise<string>;

  'incentivesController()'(overrides?: CallOverrides): Promise<string>;

  lastTimeRewardApplicable(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  'lastTimeRewardApplicable(address)'(
    _rewardsToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  'lockDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

  lockedBalances(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    total: BigNumber;
    unlockable: BigNumber;
    locked: BigNumber;
    lockData: {
      amount: BigNumber;
      unlockTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: {
      amount: BigNumber;
      unlockTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
  }>;

  'lockedBalances(address)'(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    total: BigNumber;
    unlockable: BigNumber;
    locked: BigNumber;
    lockData: {
      amount: BigNumber;
      unlockTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: {
      amount: BigNumber;
      unlockTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
  }>;

  lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  'lockedSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    user: string,
    amount: BigNumberish,
    withPenalty: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'mint(address,uint256,bool)'(
    user: string,
    amount: BigNumberish,
    withPenalty: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  minters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  'minters(address)'(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  mintersAreSet(overrides?: CallOverrides): Promise<boolean>;

  'mintersAreSet()'(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  recoverERC20(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'recoverERC20(address,uint256)'(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>;

  rewardData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    periodFinish: BigNumber;
    rewardRate: BigNumber;
    lastUpdateTime: BigNumber;
    rewardPerTokenStored: BigNumber;
    balance: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  'rewardData(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    periodFinish: BigNumber;
    rewardRate: BigNumber;
    lastUpdateTime: BigNumber;
    rewardPerTokenStored: BigNumber;
    balance: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  rewardPerToken(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  'rewardPerToken(address)'(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'rewardTokens(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  rewards(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  'rewards(address,address)'(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  'rewardsDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

  setIncentivesController(_controller: string, overrides?: Overrides): Promise<ContractTransaction>;

  'setIncentivesController(address)'(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinters(_minters: string[], overrides?: Overrides): Promise<ContractTransaction>;

  'setMinters(address[])'(_minters: string[], overrides?: Overrides): Promise<ContractTransaction>;

  stake(amount: BigNumberish, lock: boolean, overrides?: Overrides): Promise<ContractTransaction>;

  'stake(uint256,bool)'(
    amount: BigNumberish,
    lock: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  'stakingToken()'(overrides?: CallOverrides): Promise<string>;

  totalBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  'totalBalance(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockedBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  'unlockedBalance(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  userRewardPerTokenPaid(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  'userRewardPerTokenPaid(address,address)'(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  'withdraw(uint256)'(amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  withdrawExpiredLocks(overrides?: Overrides): Promise<ContractTransaction>;

  'withdrawExpiredLocks()'(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawableBalance(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    penaltyAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  'withdrawableBalance(address)'(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    penaltyAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  callStatic: {
    addReward(_rewardsToken: string, overrides?: CallOverrides): Promise<void>;

    'addReward(address)'(_rewardsToken: string, overrides?: CallOverrides): Promise<void>;

    claimableRewards(
      account: string,
      overrides?: CallOverrides
    ): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

    'claimableRewards(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

    earnedBalances(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      earningsData: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
    }>;

    'earnedBalances(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      earningsData: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
    }>;

    exit(claimRewards: boolean, overrides?: CallOverrides): Promise<void>;

    'exit(bool)'(claimRewards: boolean, overrides?: CallOverrides): Promise<void>;

    getReward(_rewardTokens: string[], overrides?: CallOverrides): Promise<void>;

    'getReward(address[])'(_rewardTokens: string[], overrides?: CallOverrides): Promise<void>;

    getRewardForDuration(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getRewardForDuration(address)'(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentivesController(overrides?: CallOverrides): Promise<string>;

    'incentivesController()'(overrides?: CallOverrides): Promise<string>;

    lastTimeRewardApplicable(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    'lastTimeRewardApplicable(address)'(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'lockDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalances(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      lockData: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
    }>;

    'lockedBalances(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      lockData: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
    }>;

    lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'lockedSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      user: string,
      amount: BigNumberish,
      withPenalty: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'mint(address,uint256,bool)'(
      user: string,
      amount: BigNumberish,
      withPenalty: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    minters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    'minters(address)'(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    mintersAreSet(overrides?: CallOverrides): Promise<boolean>;

    'mintersAreSet()'(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'recoverERC20(address,uint256)'(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      periodFinish: BigNumber;
      rewardRate: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
      balance: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    'rewardData(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      periodFinish: BigNumber;
      rewardRate: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
      balance: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    rewardPerToken(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    'rewardPerToken(address)'(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'rewardTokens(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    rewards(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    'rewards(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'rewardsDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    setIncentivesController(_controller: string, overrides?: CallOverrides): Promise<void>;

    'setIncentivesController(address)'(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinters(_minters: string[], overrides?: CallOverrides): Promise<void>;

    'setMinters(address[])'(_minters: string[], overrides?: CallOverrides): Promise<void>;

    stake(amount: BigNumberish, lock: boolean, overrides?: CallOverrides): Promise<void>;

    'stake(uint256,bool)'(
      amount: BigNumberish,
      lock: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    'stakingToken()'(overrides?: CallOverrides): Promise<string>;

    totalBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'totalBalance(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>;

    unlockedBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'unlockedBalance(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'userRewardPerTokenPaid(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'withdraw(uint256)'(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawExpiredLocks(overrides?: CallOverrides): Promise<void>;

    'withdrawExpiredLocks()'(overrides?: CallOverrides): Promise<void>;

    withdrawableBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      penaltyAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    'withdrawableBalance(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      penaltyAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  filters: {
    OwnershipTransferred(previousOwner: string | null, newOwner: string | null): EventFilter;

    Recovered(token: null, amount: null): EventFilter;

    RewardAdded(reward: null): EventFilter;

    RewardPaid(user: string | null, rewardsToken: string | null, reward: null): EventFilter;

    RewardsDurationUpdated(token: null, newDuration: null): EventFilter;

    Staked(user: string | null, amount: null, locked: null): EventFilter;

    Withdrawn(user: string | null, receivedAmount: null, penaltyPaid: null): EventFilter;
  };

  estimateGas: {
    addReward(_rewardsToken: string, overrides?: Overrides): Promise<BigNumber>;

    'addReward(address)'(_rewardsToken: string, overrides?: Overrides): Promise<BigNumber>;

    claimableRewards(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'claimableRewards(address)'(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    earnedBalances(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'earnedBalances(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    exit(claimRewards: boolean, overrides?: Overrides): Promise<BigNumber>;

    'exit(bool)'(claimRewards: boolean, overrides?: Overrides): Promise<BigNumber>;

    getReward(_rewardTokens: string[], overrides?: Overrides): Promise<BigNumber>;

    'getReward(address[])'(_rewardTokens: string[], overrides?: Overrides): Promise<BigNumber>;

    getRewardForDuration(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getRewardForDuration(address)'(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentivesController(overrides?: CallOverrides): Promise<BigNumber>;

    'incentivesController()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    'lastTimeRewardApplicable(address)'(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'lockDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalances(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'lockedBalances(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'lockedSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      user: string,
      amount: BigNumberish,
      withPenalty: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'mint(address,uint256,bool)'(
      user: string,
      amount: BigNumberish,
      withPenalty: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    minters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'minters(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mintersAreSet(overrides?: CallOverrides): Promise<BigNumber>;

    'mintersAreSet()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'recoverERC20(address,uint256)'(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>;

    rewardData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'rewardData(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerToken(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    'rewardPerToken(address)'(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'rewardTokens(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    'rewards(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'rewardsDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    setIncentivesController(_controller: string, overrides?: Overrides): Promise<BigNumber>;

    'setIncentivesController(address)'(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinters(_minters: string[], overrides?: Overrides): Promise<BigNumber>;

    'setMinters(address[])'(_minters: string[], overrides?: Overrides): Promise<BigNumber>;

    stake(amount: BigNumberish, lock: boolean, overrides?: Overrides): Promise<BigNumber>;

    'stake(uint256,bool)'(
      amount: BigNumberish,
      lock: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    'stakingToken()'(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'totalBalance(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    unlockedBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'unlockedBalance(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'userRewardPerTokenPaid(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'withdraw(uint256)'(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    withdrawExpiredLocks(overrides?: Overrides): Promise<BigNumber>;

    'withdrawExpiredLocks()'(overrides?: Overrides): Promise<BigNumber>;

    withdrawableBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'withdrawableBalance(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addReward(_rewardsToken: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'addReward(address)'(
      _rewardsToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimableRewards(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'claimableRewards(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earnedBalances(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'earnedBalances(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exit(claimRewards: boolean, overrides?: Overrides): Promise<PopulatedTransaction>;

    'exit(bool)'(claimRewards: boolean, overrides?: Overrides): Promise<PopulatedTransaction>;

    getReward(_rewardTokens: string[], overrides?: Overrides): Promise<PopulatedTransaction>;

    'getReward(address[])'(
      _rewardTokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getRewardForDuration(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getRewardForDuration(address)'(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentivesController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'incentivesController()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'lastTimeRewardApplicable(address)'(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lockDuration()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedBalances(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lockedBalances(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lockedSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      user: string,
      amount: BigNumberish,
      withPenalty: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'mint(address,uint256,bool)'(
      user: string,
      amount: BigNumberish,
      withPenalty: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    minters(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'minters(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintersAreSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'mintersAreSet()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'recoverERC20(address,uint256)'(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardData(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'rewardData(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerToken(_rewardsToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'rewardPerToken(address)'(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'rewardTokens(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'rewards(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'rewardsDuration()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setIncentivesController(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'setIncentivesController(address)'(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinters(_minters: string[], overrides?: Overrides): Promise<PopulatedTransaction>;

    'setMinters(address[])'(
      _minters: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      lock: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'stake(uint256,bool)'(
      amount: BigNumberish,
      lock: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'stakingToken()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalBalance(address)'(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockedBalance(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'unlockedBalance(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'userRewardPerTokenPaid(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(amount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

    'withdraw(uint256)'(amount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawExpiredLocks(overrides?: Overrides): Promise<PopulatedTransaction>;

    'withdrawExpiredLocks()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawableBalance(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'withdrawableBalance(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
